1. Default VPC and subnets

2. IAM role for the cluster
  - (myEKSClusterRole) -- AWS service -- EKS -- (EKS - Cluster) -- AmazonEKSClusterPolicy --
  - (myEKSWorkerNodeRole) -- AWS service -- EC2 -- EC2 -- AmazonEKSWorkerNodePolicy && AmazonEC2ContainerRegistryReadOnly && AmazonEKS_CNI_Policy

3. SSH key pair

4. Create an EKS Cluster
  -  EKS service -- Amazon EKS -- Clusters -- Create cluster -- Name:myEKSCluster -- Kubernetes Version:default -- Cluster service role:myEKSClusterRole 
      -- VPC, subnets, and security group : default -- Cluster endpoint access : Public -- Configure logging - Accept the defaults and create the cluster

5. Create a Node Group
  - click on the cluster name -- Configuration -- Compute -- click on the Add Node Group -- Name:myNodeGroup -- Node IAM Role : myEKSWorkerNodeRole 
      -- Node Group compute and scaling configuration : use below instruction -
          Field___________________________Value_______________________________Purpose
          AMI type________________________Amazon Linux 2 (AL2_x86_64)_________OS
          Capacity type___________________On-Demand___________________________Instance purchasing option
          Instance types__________________t3.micro____________________________2 vCPU, 1 GiB memory
          Disk size_______________________20 GiB______________________________---
          Scaling configuration		
          Min size________________________2___________________________________Min number of nodes for scaling in.
          Max size________________________2___________________________________Max number of nodes for scaling out.
          Desired size____________________2___________________________________Initial count
          
       -- Node Group network configuration -- VPC, subnets, and security group : default -- SSH key pair: created in the above -- Allow remote access from:All
       
--

or we can use cli to create this all things

1. Install eksctl

2. Create basic cluster 
      eksctl create cluster
      
  - or to specify details explicitly
      eksctl create cluster --name myCluster --nodes=4 --region=us-east-2 [--profile <profile-name>]
      
  - or to create advanced cluster
      eksctl create cluster --config-file=<path>

3. View progress
      eksctl utils describe-stacks --region=us-east-2 --cluster=eksctl-demo [--profile <profile-name>]

4. To list the details about the existing cluster(s)
      eksctl get cluster [--name=<name>][--region=<region>]
  - or in detailed way
      eksctl get cluster --name=eksctl-demo --region=us-east-2 [--profile <profile-name>]
      
5. To check the health of your clusters nodes
      kubectl get nodes  [--profile <profile-name>]
  
6. Delete a cluster
      eksctl delete cluster --name=<name> [--region=<region>]
  - or in detailed way
      eksctl delete cluster --region=us-east-2 --name=eksctl-demo [--profile <profile-name>]
      
# Did you see the difference in the usage of eksctl vs kubectl? 
    The former is used to create/delete/edit a cluster, 
        whereas the latter is used to interact with the cluster.
